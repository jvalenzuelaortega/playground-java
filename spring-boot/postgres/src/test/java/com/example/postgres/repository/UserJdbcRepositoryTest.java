package com.example.postgres.repository;

import com.example.postgres.dtos.UserDto;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.jdbc.core.JdbcTemplate;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;

@DataJpaTest
@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.ANY)
class UserJdbcRepositoryTest {

    @Mock
    private JdbcTemplate jdbcTemplate;

    @Autowired
    private UserJdbcRepository userJdbcRepository;

    @BeforeEach
    void setUp() {
        jdbcTemplate.execute("""
                
                    create table USERS (
                	user_id int generated by default as identity primary key,
                	fullname varchar(80) not null,
                	nickname varchar(15) not null,
                	email varchar(50) not null,
                	pass varchar(6) not null
                );
                
                """);
    }

    @Test
    void insertUser() {
        userJdbcRepository.insertUser(mockUserDto());

        UserDto retrievedUser = userJdbcRepository.getUser(1L);

        assertThat(retrievedUser).isNotNull();
        assertThat(retrievedUser.getFullName()).isEqualTo("test");
        assertThat(retrievedUser.getEmail()).isEqualTo("test@test.com");
    }

    @Test
    void updateUser() {
        userJdbcRepository.insertUser(mockUserDto());
        UserDto insertedUser = userJdbcRepository.getUser(1L);
        insertedUser.setFullName("test_2");
        userJdbcRepository.updateUser(1L, insertedUser);

        UserDto updatedUser = userJdbcRepository.getUser(1L);
        assertThat(updatedUser.getFullName()).isEqualTo("test_2");
    }

    @Test
    void deleteUser() {
        userJdbcRepository.insertUser(mockUserDto());
        userJdbcRepository.deleteUser(1L);

        UserDto deletedUser = userJdbcRepository.getUser(1L);
        assertThat(deletedUser).isNull();
    }

    private UserDto mockUserDto() {
        UserDto userDto = new UserDto();
        userDto.setFullName("test");
        userDto.setNickName("test");
        userDto.setEmail("test@test.com");
        userDto.setPass("test");
        return userDto;
    }
}